package main

import (
	"container/heap" // Пакет для работы с кучами (heaps)
	"fmt"
)

// IntHeapMax - определяем тип, который будет представлять нашу максимальную кучу
// Здесь это просто срез целых чисел ([]int).
type IntHeapMax []int

// Реализация интерфейса heap.Interface для работы с нашей структурой.

// Len возвращает длину кучи (количество элементов).
func (h IntHeapMax) Len() int {
	return len(h)
}

// Less определяет порядок элементов в куче.
// Здесь элементы упорядочиваются так, чтобы это была "максимальная куча",
// то есть элементы с большими значениями имеют приоритет.
func (h IntHeapMax) Less(i, j int) bool {
	return h[i] > h[j] // Меняем знак на ">" для максимальной кучи.
}

// Swap меняет местами два элемента в куче.
func (h IntHeapMax) Swap(i, j int) {
	h[i], h[j] = h[j], h[i]
}

// Push добавляет элемент в кучу.
// Метод должен принимать `interface{}`, чтобы соответствовать интерфейсу heap.Interface.
func (h *IntHeapMax) Push(i interface{}) {
	*h = append(*h, i.(int)) // Приводим `i` к типу int и добавляем в срез.
}

// Pop удаляет и возвращает последний элемент из кучи.
// Это часть интерфейса heap.Interface.
func (h *IntHeapMax) Pop() interface{} {
	old := *h      // Получаем текущую кучу
	n := len(old)  // Количество элементов в куче
	x := old[n-1]  // Сохраняем последний элемент
	*h = old[:n-1] // Уменьшаем длину среза, удаляя последний элемент
	return x       // Возвращаем удаленный элемент
}

func main() {
	// Создаем новую кучу с начальными значениями
	h := &IntHeapMax{3, 4, 6, 7, 2, 50, 3}

	// Инициализируем кучу, чтобы она удовлетворяла свойствам "максимальной кучи".
	heap.Init(h)

	// Добавляем новый элемент в кучу с использованием heap.Push
	heap.Push(h, 56)

	// Выводим содержимое кучи. Порядок внутри массива может не выглядеть как дерево,
	// но он будет соответствовать свойствам кучи.
	fmt.Println(*h) // Разыменовываем указатель для печати содержимого
}
