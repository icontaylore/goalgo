package поиск_минимального_времени

import (
	"fmt"
	"math"
)

func main() {
	// Инициализация количества копий и времени на одну копию для двух рабочих
	n := 5 // Количество копий
	x := 1 // Время, которое требуется первому рабочему для выполнения одной копии
	y := 2 // Время, которое требуется второму рабочему для выполнения одной копии

	// Определение минимального времени из двух рабочих
	maxInt := math.Min(float64(x), float64(y))
	m := int(maxInt)

	// Инициализация границ для бинарного поиска
	l := 0
	r := n * m // Максимальное время, которое может понадобиться

	// Бинарный поиск для нахождения минимального времени
	for l+1 != r {
		// Средняя точка между левой и правой границей
		mid := (l + r) / 2

		// Если суммарное количество копий, которое можно сделать за время mid, меньше или равно n
		// Сдвигаем левую границу, чтобы искать более быстрое время
		if (mid/x)+(mid/y) <= n {
			l = mid
		} else {
			// Если за время mid копий не хватает, сдвигаем правую границу
			r = mid
		}
	}

	// Выводим минимальное время, которое нужно для выполнения n копий
	fmt.Println(r)
}
